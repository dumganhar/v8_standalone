name: '[3rd] prebuilt v8'

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      v8_revision:
        description: 'V8 TAG(Branch) to build'
        type: string
        default: '10.4.132.22'
        required: true
      build_args:
        description: 'Build args'
        type: string
        default: 'is_debug=false v8_use_external_startup_data=false is_official_build=true v8_enable_i18n_support=false treat_warnings_as_errors=false symbol_level=0 v8_enable_webassembly=true'
        required: true
      is_build_for_android:
        description: 'Build for Android platform'
        type: boolean
        default: true
      is_build_for_ios:
        description: 'Build for iOS platform'
        type: boolean
        default: false
      is_build_for_windows:
        description: 'Build for Windows platform'
        type: boolean
        default: false
      is_build_for_macos:
        description: 'Build for MacOS platform'
        type: boolean
        default: false
      is_build_for_linux:
        description: 'Build for Linux platform'
        type: boolean
        default: false

env:
  build_args_release: 'is_debug=false v8_use_external_startup_data=false is_official_build=true v8_enable_i18n_support=false treat_warnings_as_errors=false symbol_level=0 v8_enable_webassembly=true'

jobs:
  android_prebuilt:
    if: github.event.inputs.is_build_for_android == 'true' || github.event_name == 'release'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cpu: [arm, arm64, x86, x64]
        include:
        - cpu: arm
          arch: arm
        - cpu: arm64
          arch: arm64
        - cpu: x86
          arch: x86
        - cpu: x64
          arch: x86_64
    steps:
    - uses: actions/setup-python@v2
    - name: Check workflow input version
      if: github.event.inputs.is_build_for_android == 'true'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + "${{ github.event.inputs.v8_revision }}\n")
              f.write("v8_build_args=" + "${{ github.event.inputs.build_args }}\n")

    - name: Check release version
      if: github.event_name == 'release'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          import re
          import sys
          pattern = r'\d+\.(?:\d+\.)*\d+'
          result=re.findall(pattern, "${{ github.event.release.name }}")
          if len(result) < 1:
              sys.exit(-1)
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + result[0] + "\n")
              f.write("v8_build_args=" + "${{ env.build_args_release }}\n")

    - name: Print env
      run: |
        echo "${{ env.v8_version }}"
        echo "------"
        echo "${{ env.v8_build_args }}"
        echo "------"

    - name: Setup GN
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
    - name: Fetch v8
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        fetch v8
        cd v8
        git checkout ${{ env.v8_version }}
    - name: Fetch patch
      uses: actions/checkout@v2
      with:
        path: ${{ github.repository }}
    - name: Apply patch
      if: ${{ !startsWith(env.v8_version, '7.7') }}
      working-directory: ./v8
      continue-on-error: true
      run: |
        git apply ../${{ github.repository }}/.github/workflows/tools/v8_remove_requests_revision.patch
    - name: Sync third_party
      working-directory: ./v8
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        echo "target_os = ['android']" >> ../.gclient
        gclient sync -D
    - name: Prepare android_ndk
      if: ${{ startsWith(env.v8_version, '7.7') }}
      working-directory: ./v8
      run: |
        if [ -d third_party/android_tools ]; then
          rm -rf third_party/android_tools
          mkdir third_party/android_tools
          ln -s $ANDROID_NDK_HOME third_party/android_tools/ndk
        fi
        if [ -f third_party/android_ndk/BUILD.gn ]; then
          cp third_party/android_ndk/BUILD.gn $ANDROID_NDK_HOME
        fi
        if [ -d third_party/android_tools -o -f third_party/android_ndk/BUILD.gn ]; then
          rm -rf third_party/android_ndk
          ln -s $ANDROID_NDK_HOME third_party/android_ndk
        fi
    - name: Apply 7.7 build patch
      if: ${{ startsWith(env.v8_version, '7.7') }}
      working-directory: ./v8/build
      run: |
        git apply ../../${{ github.repository }}/.github/workflows/tools/v8_7_7_229_build.patch
    - name: Generate ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        gn gen out --args="target_os=\"android\" target_cpu=\"${{ matrix.cpu }}\" v8_target_cpu=\"${{ matrix.cpu }}\" android_ndk_root=\"${ANDROID_NDK_HOME}\" is_component_build=false v8_monolithic=true android32_ndk_api_level=21 android64_ndk_api_level=21 clang_use_chrome_plugins=false use_thin_lto=false use_custom_libcxx=false ${{ env.v8_build_args }}"
    - name: Compile ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        ninja -C out v8_monolith
    - name: Prepare package
      working-directory: ./v8/out
      run: |
        mkdir -p artifact/include/v8 artifact/lib
        cp obj/libv8_monolith.a artifact/lib
        cp -r ../include/* artifact/include/v8/
        cp -r gen/include/* artifact/include/v8/
        find artifact/include/v8/. ! -name "*.h" -type f -delete
    - name: Release package
      id: release_package
      working-directory: ./v8
      run: |
        echo "::set-output name=head_full::$(git rev-parse HEAD)"
        cd out
        tar -zcvf android-${{ matrix.arch }}.tgz -C artifact .
    - name: Upload Artifact
      if: github.event.inputs.is_build_for_android == 'true'
      uses: actions/upload-artifact@v3
      with: 
        name: android-${{ matrix.arch }}
        path: ./v8/out/artifact
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@e74ff71f7d8a4c4745b560a485cc5fdb9b5b999d
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./v8/out/android-${{ matrix.arch }}.tgz
        asset_name: android-${{ matrix.arch }}.tgz
        tag: ${{ github.ref }}

  windows_prebuilt:
    if: github.event.inputs.is_build_for_windows == 'true' || github.event_name == 'release'
    runs-on: windows-2019
    strategy:
      matrix:
        # arch: [x86, x64, arm64]
        arch: [x64]
    steps:
    - uses: actions/setup-python@v2
    - name: Check workflow input version
      if: github.event.inputs.is_build_for_windows == 'true'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + "${{ github.event.inputs.v8_revision }}\n")
              f.write("v8_build_args=" + "${{ github.event.inputs.build_args }}\n")

    - name: Check release version
      if: github.event_name == 'release'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          import re
          import sys
          pattern = r'\d+\.(?:\d+\.)*\d+'
          result=re.findall(pattern, "${{ github.event.release.name }}")
          if len(result) < 1:
              sys.exit(-1)
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + result[0] + "\n")
              f.write("v8_build_args=" + "${{ env.build_args_release }}\n")

    - name: Print env
      run: |
        echo "${{ env.v8_version }}"
        echo "------"
        echo "${{ env.v8_build_args }}"
        echo "------"

    - name: Setup GN
      run: |
        Invoke-WebRequest -OutFile depot_tools.zip https://storage.googleapis.com/chrome-infra/depot_tools.zip
        Expand-Archive depot_tools.zip -DestinationPath C:\depot_tools
        rm depot_tools.zip
    - name: Checkout v8
      run: |
        $env:DEPOT_TOOLS_WIN_TOOLCHAIN = 0
        $env:Path += ";C:\depot_tools"
        fetch v8 &&
        cd v8 &&
        git checkout ${{ env.v8_version }} &&
        gclient sync -D
    - name: Generate ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        $env:DEPOT_TOOLS_WIN_TOOLCHAIN = 0
        $env:Path += ";C:\depot_tools"
        gn gen out --args="target_cpu=""""""${{ matrix.arch }}"""""" v8_target_cpu=""""""${{ matrix.arch }}"""""" is_component_build=false v8_monolithic=true chrome_pgo_phase=0 ${{ env.v8_build_args }}"
    - name: Compile ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        $env:Path += ";C:\depot_tools"
        ninja -C out v8_monolith
    - name: Prepare package
      working-directory: ./v8/out
      run: |
        New-Item -type directory -Path artifact/include/v8, artifact/lib
        Copy-Item obj/v8_monolith.lib artifact/lib
        Copy-Item -r ../include/* artifact/include/v8/
        Copy-Item -r gen/include/* artifact/include/v8/
        Get-ChildItem -Exclude *.h -Recurse -File -Path artifact/include/v8 | Remove-Item
    - name: Release package
      id: release_package
      working-directory: ./v8
      run: |
        Write-Output "::set-output name=head_full::$(git rev-parse HEAD)"
        cd out
        Compress-Archive -Path artifact\* -DestinationPath windows-${{ matrix.arch }}.zip
    - name: Upload Artifact
      if: github.event.inputs.is_build_for_windows == 'true'
      uses: actions/upload-artifact@v3
      with: 
        name: windows-${{ matrix.arch }}
        path: ./v8/out/artifact
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@e74ff71f7d8a4c4745b560a485cc5fdb9b5b999d
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./v8/out/windows-${{ matrix.arch }}.zip
        asset_name: windows-${{ matrix.arch }}.zip
        tag: ${{ github.ref }}

  macos_prebuilt:
    if: github.event.inputs.is_build_for_macos == 'true' || github.event_name == 'release'
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
    - uses: actions/setup-python@v2
    - name: Check workflow input version
      if: github.event.inputs.is_build_for_macos == 'true'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + "${{ github.event.inputs.v8_revision }}\n")
              f.write("v8_build_args=" + "${{ github.event.inputs.build_args }}\n")

    - name: Check release version
      if: github.event_name == 'release'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          import re
          import sys
          pattern = r'\d+\.(?:\d+\.)*\d+'
          result=re.findall(pattern, "${{ github.event.release.name }}")
          if len(result) < 1:
              sys.exit(-1)
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + result[0] + "\n")
              f.write("v8_build_args=" + "${{ env.build_args_release }}\n")

    - name: Print env
      run: |
        echo "${{ env.v8_version }}"
        echo "------"
        echo "${{ env.v8_build_args }}"
        echo "------"

    - name: Setup GN
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /usr/local/opt/depot_tools
        export PATH=/usr/local/opt/depot_tools:$PATH
    - name: Checkout v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        fetch v8
        cd v8
        git checkout ${{ env.v8_version }}
        gclient sync -D
    - name: Fetch patch
      uses: actions/checkout@v2
      with:
        path: ${{ github.repository }}
    - name: Apply std::same compiler error
      if: ${{ startsWith(env.v8_version, '10.4') }}
      working-directory: ./v8/
      run: |
        pwd
        git apply ../${{ github.repository }}/.github/workflows/tools/v8_10_4_simd.patch
    - name: Generate ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        gn gen out --args="target_cpu=\"${{ matrix.arch }}\" v8_target_cpu=\"${{ matrix.arch }}\" chrome_pgo_phase=0 is_component_build=false v8_monolithic=true ${{ env.v8_build_args }}"
    - name: Compile ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        ninja -C out v8_monolith
    - name: Prepare package
      working-directory: ./v8/out
      run: |
        mkdir -p artifact/include/v8 artifact/lib
        cp obj/libv8_monolith.a artifact/lib
        cp -r ../include/* artifact/include/v8/
        cp -r gen/include/* artifact/include/v8/
        find artifact/include/v8/. ! -name "*.h" -type f -delete
    - name: Release package
      id: release_package
      working-directory: ./v8
      run: |
        echo "::set-output name=head_full::$(git rev-parse HEAD)"
        cd out
        tar -zcvf macos-${{ matrix.arch }}.tgz -C artifact .
    - name: Upload Artifact
      if: github.event.inputs.is_build_for_macos == 'true'
      uses: actions/upload-artifact@v3
      with: 
        name: macos-${{ matrix.arch }}
        path: ./v8/out/artifact
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@e74ff71f7d8a4c4745b560a485cc5fdb9b5b999d
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./v8/out/macos-${{ matrix.arch }}.tgz
        asset_name: macos-${{ matrix.arch }}.tgz
        tag: ${{ github.ref }}

  linux_prebuilt:
    if: github.event.inputs.is_build_for_linux == 'true' || github.event_name == 'release'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86, x64, arm64, arm]
    steps:
    - uses: actions/setup-python@v2
    - name: Check workflow input version
      if: github.event.inputs.is_build_for_linux == 'true'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + "${{ github.event.inputs.v8_revision }}\n")
              f.write("v8_build_args=" + "${{ github.event.inputs.build_args }}\n")

    - name: Check release version
      if: github.event_name == 'release'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          import re
          import sys
          pattern = r'\d+\.(?:\d+\.)*\d+'
          result=re.findall(pattern, "${{ github.event.release.name }}")
          if len(result) < 1:
              sys.exit(-1)
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + result[0] + "\n")
              f.write("v8_build_args=" + "${{ env.build_args_release }}\n")

    - name: Print env
      run: |
        echo "${{ env.v8_version }}"
        echo "------"
        echo "${{ env.v8_build_args }}"
        echo "------"

    - name: Setup GN
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
    - name: Checkout v8
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        fetch v8
        cd v8
        git checkout ${{ env.v8_version }}
        gclient sync -D
    - name: Install sysroot(${{ matrix.arch }})
      if: ${{ contains(matrix.arch, 'arm') }}
      working-directory: ./v8
      run: |
        build/linux/sysroot_scripts/install-sysroot.py --arch=${{ matrix.arch }}
    - name: Generate ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        gn gen out --args="target_cpu=\"${{ matrix.arch }}\" v8_target_cpu=\"${{ matrix.arch }}\" chrome_pgo_phase=0 is_component_build=false v8_monolithic=true ${{ env.v8_build_args }}"
    - name: Compile ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=$GITHUB_WORKSPACE/depot_tools:$PATH
        ninja -C out v8_monolith
    - name: Prepare package
      working-directory: ./v8/out
      run: |
        mkdir -p artifact/include/v8 artifact/lib
        cp obj/libv8_monolith.a artifact/lib
        cp -r ../include/* artifact/include/v8/
        cp -r gen/include/* artifact/include/v8/
        find artifact/include/v8/. ! -name "*.h" -type f -delete
    - name: Release package
      id: release_package
      working-directory: ./v8
      run: |
        echo "::set-output name=head_full::$(git rev-parse HEAD)"
        cd out
        tar -zcvf linux-${{ matrix.arch }}.tgz -C artifact .
    - name: Upload Artifact
      if: github.event.inputs.is_build_for_linux == 'true'
      uses: actions/upload-artifact@v3
      with: 
        name: linux-${{ matrix.arch }}
        path: ./v8/out/artifact
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@e74ff71f7d8a4c4745b560a485cc5fdb9b5b999d
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./v8/out/linux-${{ matrix.arch }}.tgz
        asset_name: linux-${{ matrix.arch }}.tgz
        tag: ${{ github.ref }}
    # - name: Install Requirement
    #   shell: bash
    #   run: |
    #     pip3 install -U cos-python-sdk-v5
    # - name: Publish package
    #   shell: python3 {0}
    #   env:
    #     local_file: ./v8/out/linux-${{ matrix.arch }}.tgz
    #     cos_key: hippy/${{ github.event.inputs.hip_v8_root }}/v8/${{ github.event.inputs.package_tag }}/linux-${{ matrix.arch }}.tgz
    #     v8_head: ${{ steps.release_package.outputs.head_full }}
    #   run: ${{ env.publish_package_script }}

  ios_prebuilt:
    if: github.event.inputs.is_build_for_ios == 'true' || github.event_name == 'release'
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
    - uses: actions/setup-python@v2
    - name: Check workflow input version
      if: github.event.inputs.is_build_for_ios == 'true'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + "${{ github.event.inputs.v8_revision }}\n")
              f.write("v8_build_args=" + "${{ github.event.inputs.build_args }}\n")

    - name: Check release version
      if: github.event_name == 'release'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          import re
          import sys
          pattern = r'\d+\.(?:\d+\.)*\d+'
          result=re.findall(pattern, "${{ github.event.release.name }}")
          if len(result) < 1:
              sys.exit(-1)
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as f:
              f.write("v8_version=" + result[0] + "\n")
              f.write("v8_build_args=" + "${{ env.build_args_release }}\n")

    - name: Print env
      run: |
        echo "${{ env.v8_version }}"
        echo "------"
        echo "${{ env.v8_build_args }}"
        echo "------"

    - name: Setup GN
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /usr/local/opt/depot_tools
        export PATH=/usr/local/opt/depot_tools:$PATH
    - name: Checkout v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        fetch v8
        cd v8
        git checkout ${{ env.v8_version }}
    - name: Sync third_party
      working-directory: ./v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        echo "target_os = ['ios']" >> ../.gclient
        gclient sync -D
    - name: Fetch patch
      uses: actions/checkout@v2
      with:
        path: ${{ github.repository }}
    - name: Apply std::same compiler error
      if: ${{ startsWith(env.v8_version, '10.4') }}
      working-directory: ./v8/
      run: |
        git apply ../${{ github.repository }}/.github/workflows/tools/v8_10_4_simd.patch
    - name: Remove compiler flags
      working-directory: ./v8/build/config/compiler
      run: |
        awk '!/"-mllvm"/' BUILD.gn > BUILD.gn.0 && mv -f BUILD.gn.0 BUILD.gn
        awk '!/"-instcombine-lower-dbg-declare=0"/' BUILD.gn > BUILD.gn.0 && mv -f BUILD.gn.0 BUILD.gn
        awk '!/ldflags \+= \[ "-Wl,-mllvm,-instcombine-lower-dbg-declare=0" \]/' BUILD.gn > BUILD.gn.0 && mv -f BUILD.gn.0 BUILD.gn
    - name: Generate ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        gn gen out --args="target_os=\"ios\" target_cpu=\"${{ matrix.arch }}\" v8_target_cpu=\"${{ matrix.arch }}\" is_component_build=false v8_monolithic=true chrome_pgo_phase=0 enable_ios_bitcode=true ios_deployment_target=10 v8_enable_pointer_compression=false use_custom_libcxx=false ios_enable_code_signing=false ${{ env.v8_build_args }}"
    - name: Compile ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        ninja -C out v8_monolith
    - name: Prepare package
      working-directory: ./v8/out
      run: |
        mkdir -p artifact/include/v8 artifact/lib
        cp obj/libv8_monolith.a artifact/lib
        cp -r ../include/* artifact/include/v8/
        cp -r gen/include/* artifact/include/v8/
        find artifact/include/v8/. ! -name "*.h" -type f -delete
    - name: Release package
      id: release_package
      working-directory: ./v8
      run: |
        echo "::set-output name=head_full::$(git rev-parse HEAD)"
        cd out
        tar -zcvf ios-${{ matrix.arch }}.tgz -C artifact .
    - name: Upload Artifact
      if: github.event.inputs.is_build_for_ios == 'true'
      uses: actions/upload-artifact@v3
      with: 
        name: ios-${{ matrix.arch }}
        path: ./v8/out/artifact
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@e74ff71f7d8a4c4745b560a485cc5fdb9b5b999d
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./v8/out/ios-${{ matrix.arch }}.tgz
        asset_name: ios-${{ matrix.arch }}.tgz
        tag: ${{ github.ref }}
    # - name: Install Requirement
    #   shell: bash
    #   run: |
    #     pip install -U cos-python-sdk-v5
    # - name: Publish package
    #   shell: python
    #   env:
    #     local_file: ./v8/out/ios-${{ matrix.arch }}.tgz
    #     cos_key: hippy/${{ github.event.inputs.hip_v8_root }}/v8/${{ github.event.inputs.package_tag }}/ios-${{ matrix.arch }}.tgz
    #     v8_head: ${{ steps.release_package.outputs.head_full }}
    #   run: ${{ env.publish_package_script }}
